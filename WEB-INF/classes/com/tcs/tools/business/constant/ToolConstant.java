package com.tcs.tools.business.constant;


public class ToolConstant {
	public static final String PATTERN_ANALYSYS_GET_PARSED_DATA = "SELECT "
			+ " RUN_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,ACTUAL_PATTERN,STATEMENT_TYPE,ORDER_NO "
			+ " FROM PARSE_RESULTS_TABLE " + " WHERE RUN_ID= ? "
			+ " ORDER BY  PROCEDURE_NAME,ORDER_NO ";
	public static final String PATTERN_ANALYSYS_GET_PARSED_DATA_COUNT = "SELECT count(*)"
			//+ " RUN_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,ACTUAL_PATTERN,STATEMENT_TYPE,ORDER_NO "
			+ " FROM PARSE_RESULTS_TABLE " + " WHERE RUN_ID= ? ";
			//+ " ORDER BY  PROCEDURE_NAME,ORDER_NO ";
	
	public static final String PATTERN_ANALYSYS_GET_SCORE = "SELECT STATEMENT_CONT,STATEMENT_SCORE "
			+ " FROM INDV_STATEMENT_SCORE_TABLE where VALID_YN ='Y' and DB_MIGRATION_TYPE = ? ";
	public static final String PATTERN_ANALYSYS_GET_PATTERN_SCORE = "SELECT PATTERN_SCORE,PATTERN_ID,PATTERN_FORMAT "
			+ " FROM PATTERN_SCORE_TABLE " + " WHERE VALID_YN = 'Y' and DB_MIGRATION_TYPE = ?";
	public static final String PATTERN_ANALYSYS_INSERT_SUMMARY = "INSERT INTO PATTERN_RESULTS_TABLE	(RUN_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,KEY_WORD,SCORE,PATTERN_ID,PATTERN_DESC,FORMED_STATEMENT,CREATED_BY,CREATED_DATE,QUERY_COUNT,FOLDER_PATH) VALUES (?,?,?,?,?,?,?,?,?,?,?,? ,?) ";

	public static final String PATTERN_ANALYSYS_PROC_WISE_COUNT="select PROCEDURE_NAME,count(ORDER_NO) as count_val" +
			" from PARSE_RESULTS_TABLE " +
			" where RUN_ID = ? " +
			" group by PROCEDURE_NAME "; 
        
        public static final String PATTERN_ANALYSYS_PROC_WISE_COUNT_SINGLE="select PROCEDURE_NAME,count(ORDER_NO) as count_val" +
			" from PARSE_RESULTS_TABLE " +
			" where RUN_ID = ? "+
                        " AND PROCEDURE_NAME= ? ";
      public static final String MANUALLY_ADDED_BLOCKS_INSERT="INSERT INTO MANUALLY_ADDED_CODE_BLOCKS_TABLE(RUN_ID,PROJECT_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,STATEMENT_TYPE,ORDER_NO,CREATED_BY,CREATED_DATE) VALUES (?,?,?,?,?,?,?,?,?)";
      
      public static final String PARSE_RESULT_TABLE_INSERT="INSERT INTO PARSE_RESULTS_TABLE(RUN_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,ACTUAL_PATTERN,STATEMENT_TYPE,CREATED_BY,CREATED_DATE,ORDER_NO) VALUES (?,?,?,?,?,?,?,?,?)";
        
        public static final String GET_PATTERN_DATA="SELECT RUN_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,KEY_WORD,SCORE,PATTERN_ID,PATTERN_DESC,FORMED_STATEMENT,CREATED_BY,CREATED_DATE,QUERY_COUNT FROM PATTERN_RESULTS_TABLE WHERE RUN_ID in(?) and pattern_id like 'P_DML%' ORDER BY PROCEDURE_NAME,STATEMENT_NO";
        public static final String GET_PATTERN_DATA_DUMMY="SELECT RUN_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,KEY_WORD,SCORE,PATTERN_ID,PATTERN_DESC,FORMED_STATEMENT,CREATED_BY,CREATED_DATE FROM PATTERN_RESULTS_TABLE WHERE RUN_ID in(?)";
        public static final String GET_PARSE_RESULTS="SELECT RUN_ID,PROCEDURE_NAME,STATEMENT,STATEMENT_NO,ACTUAL_PATTERN,STATEMENT_TYPE,ORDER_NO FROM PARSE_RESULTS_TABLE WHERE RUN_ID =? ORDER BY  PROCEDURE_NAME,ORDER_NO";
        public static final String GET_DB2_NOT_SUPPORTED_KEYWORDS="SELECT SEQ_NO,KEY_WORD FROM SUPPORTED_NON_SUPPORTED_KEYWORDS_TABLE WHERE KEY_WORD_TYPE LIKE '%DB2_NOT_SUPPORTED_FROM_SYBASE%'";
        public static final String GET_DB2_SUPPORTED_KEYWORDS="SELECT SEQ_NO,KEY_WORD FROM SUPPORTED_NON_SUPPORTED_KEYWORDS_TABLE WHERE KEY_WORD_TYPE LIKE '%DB2_RESERVED_KEYWORDS%'";
        public static final String INSERT_REPORT_KEYWORDS="INSERT INTO REPORT_KEYWORDS_USAGE_TABLE (RUN_ID,PROCEDURE_NAME,KEY_WORD,REPORT_TYPE,CREATED_BY,CREATED_DATE) VALUES(?,?,?,?,?,?)";
        //public static final String INSERT_REPORT_KEYWORDS="INSERT INTO REPORT_KEYWORDS_USAGE_TABLE (RUN_ID,PROCEDURE_NAME,KEY_WORD,REPORT_TYPE,CREATED_BY) VALUES(?,?,?,?,?)";
        public static final String GET_REPORT_KEYWORDS="SELECT * FROM  REPORT_KEYWORDS_USAGE_TABLE ";
        
        public static final String PATTERN_ANALYSYS_GET_KEYWORD_INDV_SCORE = "SELECT KEYWORD,SCORE,PATTERN_ID,PATTERN_DESC "
			+ " FROM PATTERN_INDVIDUAL_KEYWORD_LOOKUP_TABLE WHERE VALID_YN ='Y' and DB_MIGRATION_TYPE = ? ";
        
        public static final String GET_ALL_CONSTRUCTS="SELECT * FROM  PATTERN_LOOKUP_TABLE WHERE STATEMENT_TYPE ='Construct Key word' and DB_MIGRATION_TYPE = ?"; 
        // string constants
	public static final String KEY_WORD_OTHER_FORMAT = "OTHER FORMAT";
	public static final String KEY_WORD_BLANK = "BLANK";
	public static final String KEY_WORD_SELECT = "SELECT";
	public static final String STMT_TYPE_STATEMENT = "Statement Type";
	public static final String STMT_TYPE_KEY_WORD = "Key Word";
	public static final String STMT_TYPE_OPERATOR = "Operator";
	public static final String STMT_TYPE_SYMBOL = "Symbol";
	public static final String STMT_TYPE_SUPPORTED_FUNCTION = "Supported Function";
	public static final String STMT_TYPE_CONSTRUCT = "Construct Key word";
	public static final String STMT_TYPE_COMMIT = "Commit";
        public static final String REPORT_TYPE = "DB2_NOT_SUPPORTED_FROM_SYBASE";

	// created by
	public static final String CREATED_BY = "TCS USER";
	
	
	//FOR FILE COMPARISION - source target pattern matching
	public static final String GET_PATTERN_MATCH_COUNT_DETAILS ="select SEQ_NO, PATTERN_DESC, PATTERN_ID, COUNT_VAL from pattern_match_count_table WHERE DB_MIGRATION_TYPE= ? ";
	/*public static final String GET_PATTERN_DATA_MATCH="SELECT PROCEDURE_NAME,STATEMENT_NO,PATTERN_ID,PATTERN_DESC,FORMED_STATEMENT FROM pattern_results_table where run_id= ? and KEY_WORD='Statement Type' and pattern_desc <> ''  ORDER BY PROCEDURE_NAME,STATEMENT_NO ;";*/
	public static final String GET_PATTERN_DATA_MATCH="SELECT PROCEDURE_NAME,STATEMENT_NO,PATTERN_ID,PATTERN_DESC,FORMED_STATEMENT FROM pattern_results_table where run_id= ? and KEY_WORD='Statement Type' and pattern_desc <> ''   ORDER BY PROCEDURE_NAME,STATEMENT_NO ";
	//public static final String GET_PATTERN_DATA_MATCH="SELECT PROCEDURE_NAME,STATEMENT_NO,PATTERN_ID,PATTERN_DESC,FORMED_STATEMENT FROM pattern_results_table where run_id= ? and KEY_WORD='Statement Type' and pattern_desc <> '' and pattern_id <> 'PAT_C_99'  ORDER BY PROCEDURE_NAME,STATEMENT_NO ";
	public static final String GET_EXCEPTION_PATTERNS =" SELECT SCORE_SEQ, PATTERN_SCORE, PATTERN_FORMAT, PATTERN_ID, VALID_YN,  DB_MIGRATION_TYPE FROM pattern_score_table WHERE PATTERN_SCORE=0 AND DB_MIGRATION_TYPE= ?  AND VALID_YN='Y' AND PATTERN_ID LIKE '%PAT_C_%' ";
	public static final String INSERT_COMAPRE_MAIN_TABLE_DATA =" INSERT INTO COMPARE_MAIN_TABLE(COMPARE_SEQ, DB_MIGRATION_TYPE, SOURCE_RUN_ID, TARGET_RUN_ID, CREATE_BY, CREATED_DATE) VALUES(?,?,?,?,?,?) ";
	
	public static final String SELECT_COMAPRE_MAIN_TABLE_DATA =" SELECT count(*) FROM COMPARE_MAIN_TABLE WHERE COMPARE_SEQ =? and DB_MIGRATION_TYPE =? ";
	public static final String INSERT_CURSOR_USAGE="INSERT INTO cursor_usage_details_table(RUN_ID, ORDER_NO, PROCEDURE_NAME, STATEMENT_NO, CURSOR_NAME, CREATED_BY, CREATED_DATE) VALUES (?,?,?,?,?,?,?)";
	public static final String GET_CURSOR_DETAILS="SELECT RUN_ID, ORDER_NO, PROCEDURE_NAME, STATEMENT_NO, CURSOR_NAME FROM cursor_usage_details_table WHERE RUN_ID= ? ";
	public static final String PATTERN_ID_DECLARE_CURSOR = "PAT_C_90";
	public static final String PATTERN_ID_DECLARE_CURSOR_SYBASEORACLE = "PAT_C_94";
	public static final String PATTERN_ID_SELECT_OTHER = "PAT_01";
	public static final String PATTERN_ID_SELECT_OTHER_SYBASEORACLE = "PAT_112";
	public static final String PATTERN_ID_DECLARE_VARIABLE = "PAT_C_99";
	public static final String PATTERN_ID_DECLARE_VARIABLE_SYBASEORACLE = "PAT_C_103";
	public static final String PATTERN_ID_DECLARE_CONTINUE_HANDLER = "PAT_C_102";
	public static final String PATTERN_ID_CREATE_DB_OBJECT= "PAT_C_104";
	public static final String PATTERN_ID_CREATE_DB_OBJECT_SYBASEORACLE= "PAT_C_108";
	
	//PAT_C_104
	public static final String PATTERN_ID_SET_VARIABLE = "PAT_C_100";
	public static final String PATTERN_ID_SET_VARIABLE_SYBASEORACLE = "PAT_C_104";
	public static final String PATTERN_ID_OPEN_CURSOR = "PAT_38";
	public static final String PATTERN_ID_OPEN_CURSOR_SYBASEORACLE = "PAT_156";
	public static final String INSERT_COMPARE_FORMED_STMT =" INSERT INTO compare_formed_statements_table (COMPARE_SEQ, ORDER_NO, PROCEDURE_NAME, SOURCE_STATEMENT_NO, SOURCE_PATTERN_ID, SOURCE_FORMED_STATEMENT, TARGET_STATEMENT_NO, TARGET_PATTERN_ID, TARGET_FORMED_STATEMENT, MATCHED_YN, CREATE_BY, CREATED_DATE) " +
			  " VALUES(?,?,?,?,?,?,?,?,?,?,?,?) "; 
	public static final String GET_SOURCE_TARGET_PATTERN_MATCH_DETAILS = "SELECT SEQ_NO, SOURCE_PATTERN_ID, TARGET_PATTERN_ID FROM SOURCE_TARGET_PATTERN_MATCH_TABLE WHERE DB_MIGRATION_TYPE=? ORDER BY SOURCE_PATTERN_ID";
	public static final String GET_COMAPRE_DETAILS="SELECT PROCEDURE_NAME, SOURCE_STATEMENT_NO, SOURCE_PATTERN_ID, SOURCE_FORMED_STATEMENT, TARGET_STATEMENT_NO, TARGET_PATTERN_ID, TARGET_FORMED_STATEMENT, MATCHED_YN FROM compare_formed_statements_table where compare_seq= ? ";
	public static final String INSERT_VARIABLES_INTO_VARIABLE_USAGE_TABLE="INSERT INTO VARIABLE_USAGE_DETAILS_TABLE (RUN_ID, PROCEDURE_NAME, SOURCE_VARIABLE_DATATYPE, SOURCE_VARIABLE, TARGET_VARIABLE, TARGET_VARIABLE_DATATYPE, CREATED_BY, CREATED_DATE )VALUES (?,?,?,?,?,?,?,?)";
	 
	//public static final String GET_COMAPRED_KEYWORD_DETAILS="SELECT a.*,b.* FROM compare_formed_statements_keywords_table a, compare_formed_statements_table b WHERE a.compare_seq=? and a.procedure_name=? and  a.compare_seq=b.compare_seq and a.procedure_name =b.procedure_name and a.compare_orderno=b.order_no order by b.procedure_name,b.source_statement_no;";
	//public static final String GET_COMAPRED_KEYWORD_DETAILS=" SELECT  A.PROCEDURE_NAME,A.COMPARE_ORDERNO,A.PREVIOUS_KEYWORD,A.MATCH_YN,B.SOURCE_STATEMENT_NO, " +
	//		" B.SOURCE_PATTERN_ID,A.SOURCE_INDEX,A.SOURCE_SUB_INDEX,A.SOURCE_PATTERN_TYPE,A.SOURCE_KEYWORD, " +
	//		" A.SOURCE_ALIAS,A.SOURCE_LEVELCOUNT/*,B.SOURCE_FORMED_STATEMENT AS SOURCE_FORMED_STATEMENT*/, B.TARGET_STATEMENT_NO, " +
	//		" B.TARGET_PATTERN_ID,A.TARGET_INDEX,A.TARGET_SUB_INDEX,A.TARGET_PATTERN_TYPE,A.TARGET_KEYWORD, " +
	//		" A.TARGET_ALIAS,A.TARGET_LEVELCOUNT/*,B.TARGET_FORMED_STATEMENT*/ " +
	//		" FROM COMPARE_FORMED_STATEMENTS_KEYWORDS_TABLE A, COMPARE_FORMED_STATEMENTS_TABLE B  " +
	//		" WHERE A.COMPARE_SEQ= ? AND A.PROCEDURE_NAME= ? " +
	//		" AND  A.COMPARE_SEQ=B.COMPARE_SEQ " +
	//		" AND A.PROCEDURE_NAME =B.PROCEDURE_NAME " +
	//		" AND A.COMPARE_ORDERNO=B.ORDER_NO " +
	//		" ORDER BY B.PROCEDURE_NAME,B.SOURCE_STATEMENT_NO,A.SOURCE_INDEX,A.SOURCE_SUB_INDEX,A.TARGET_INDEX,A.TARGET_SUB_INDEX"; 
	public static final String GET_COMAPRED_KEYWORD_DETAILS_SOURCE=" SELECT  A.PROCEDURE_NAME,A.COMPARE_ORDERNO,A.PREVIOUS_KEYWORD,A.MATCH_YN,B.SOURCE_STATEMENT_NO, " +
			" B.SOURCE_PATTERN_ID,A.SOURCE_INDEX,A.SOURCE_SUB_INDEX,A.SOURCE_PATTERN_TYPE,A.SOURCE_KEYWORD, " +
			" A.SOURCE_ALIAS,A.SOURCE_LEVELCOUNT/*,B.SOURCE_FORMED_STATEMENT AS SOURCE_FORMED_STATEMENT*/, B.TARGET_STATEMENT_NO, " +
			" B.TARGET_PATTERN_ID,A.TARGET_INDEX,A.TARGET_SUB_INDEX,A.TARGET_PATTERN_TYPE,A.TARGET_KEYWORD, " +
			" A.TARGET_ALIAS,A.TARGET_LEVELCOUNT/*,B.TARGET_FORMED_STATEMENT*/,A.SOURCE_PRIMARY_STATEMENT,A.TARGET_PRIMARY_STATEMENT " +
			" FROM COMPARE_FORMED_STATEMENTS_KEYWORDS_TABLE A, COMPARE_FORMED_STATEMENTS_TABLE B  " +
			" WHERE A.COMPARE_SEQ= ? AND A.PROCEDURE_NAME= ? " +
			" AND  A.COMPARE_SEQ=B.COMPARE_SEQ " +
			" AND A.PROCEDURE_NAME =B.PROCEDURE_NAME " +
			" AND A.COMPARE_ORDERNO=B.ORDER_NO " +
			" ORDER BY B.PROCEDURE_NAME,B.SOURCE_STATEMENT_NO,A.COMPARE_ORDERNO,A.SOURCE_INDEX,A.SOURCE_SUB_INDEX,A.TARGET_INDEX,A.TARGET_SUB_INDEX";
	public static final String GET_COMAPRED_KEYWORD_DETAILS_TARGET=" SELECT  A.PROCEDURE_NAME,A.COMPARE_ORDERNO,A.PREVIOUS_KEYWORD,A.MATCH_YN,B.SOURCE_STATEMENT_NO, " +
			" B.SOURCE_PATTERN_ID,A.SOURCE_INDEX,A.SOURCE_SUB_INDEX,A.SOURCE_PATTERN_TYPE,A.SOURCE_KEYWORD, " +
			" A.SOURCE_ALIAS,A.SOURCE_LEVELCOUNT/*,B.SOURCE_FORMED_STATEMENT AS SOURCE_FORMED_STATEMENT*/, B.TARGET_STATEMENT_NO, " +
			" B.TARGET_PATTERN_ID,A.TARGET_INDEX,A.TARGET_SUB_INDEX,A.TARGET_PATTERN_TYPE,A.TARGET_KEYWORD, " +
			" A.TARGET_ALIAS,A.TARGET_LEVELCOUNT/*,B.TARGET_FORMED_STATEMENT*/,A.SOURCE_PRIMARY_STATEMENT,A.TARGET_PRIMARY_STATEMENT " +
			" FROM COMPARE_FORMED_STATEMENTS_KEYWORDS_TABLE A, COMPARE_FORMED_STATEMENTS_TABLE B  " +
			" WHERE A.COMPARE_SEQ= ? AND A.PROCEDURE_NAME= ? " +
			" AND  A.COMPARE_SEQ=B.COMPARE_SEQ " +
			" AND A.PROCEDURE_NAME =B.PROCEDURE_NAME " +
			" AND A.COMPARE_ORDERNO=B.ORDER_NO " +
			" ORDER BY B.PROCEDURE_NAME,B.SOURCE_STATEMENT_NO,A.COMPARE_ORDERNO,A.TARGET_INDEX,A.TARGET_SUB_INDEX";
	
	public static final String PATTERN_DELETE_WITH_JOIN="PAT_C_85";  
	//public static final String GET_COMPARED_SOURCE_TARGET_PATTERNS ="SELECT COMPARE_SEQ, ORDER_NO, PROCEDURE_NAME, SOURCE_STATEMENT_NO, SOURCE_PATTERN_ID, SOURCE_FORMED_STATEMENT, TARGET_STATEMENT_NO, TARGET_PATTERN_ID, TARGET_FORMED_STATEMENT, MATCHED_YN FROM compare_formed_statements_table where compare_seq=?";
	public static final String GET_COMPARED_SOURCE_TARGET_PATTERNS ="SELECT COMPARE_SEQ, ORDER_NO, PROCEDURE_NAME, SOURCE_STATEMENT_NO, SOURCE_PATTERN_ID, SOURCE_FORMED_STATEMENT, TARGET_STATEMENT_NO, TARGET_PATTERN_ID, TARGET_FORMED_STATEMENT, MATCHED_YN FROM COMPARE_FORMED_STATEMENTS_TABLE WHERE COMPARE_SEQ=? AND PROCEDURE_NAME=?";
	public static final String GET_COMPARE_KEYWORD_SEQ = "SELECT COMPARE_KEYWORD_SEQ FROM compare_keyword_seq_table";
	public static final String INSERT_COMPARE_FORMED_KEYWORD_STMT ="INSERT INTO compare_formed_statements_keywords_table(COMPARE_SEQ, COMPARE_KEYWORD_SEQ, PROCEDURE_NAME, COMPARE_ORDERNO, PREVIOUS_KEYWORD, SOURCE_INDEX, SOURCE_PATTERN_TYPE, SOURCE_KEYWORD, SOURCE_ALIAS, TARGET_INDEX, TARGET_PATTERN_TYPE, TARGET_KEYWORD, TARGET_ALIAS, MATCH_YN, MATCH_DESC, SOURCE_LEVELCOUNT, TARGET_LEVELCOUNT,SOURCE_SUB_INDEX,TARGET_SUB_INDEX,SOURCE_PRIMARY_STATEMENT,TARGET_PRIMARY_STATEMENT) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )";
	
	
	public static final String GET_PROC_NAMES_IN_COMAPRED_KEYWORD="SELECT DISTINCT PROCEDURE_NAME FROM compare_formed_statements_keywords_table where compare_seq=?";
	
	public static final String INSERT_COMPARE_STATEMENT_AFTER_MODIFICATION="INSERT INTO COMPARE_FORMED_STATEMENTS_SUMMARY_TABLE(COMPARE_SEQ, PROCEDURE_NAME, SOURCE_STATEMENT_NO, SOURCE_MODIFIED_FORMED_STATEMENT, SOURCE_FORMED_STATEMENT, SOURCE_PATTERN_ID, TARGET_STATEMENT_NO, TARGET_MODIFIED_FORMED_STATEMENT, TARGET_FORMED_STATEMENT, TARGET_PATTERN_ID, CREATED_BY, CREATED_DATE,MISMATCH_CATEGORY,MISMATCH_CATEGORY_DESC,MATCHED_YN,COMPARE_ORDERNO,PERFORMANCE_IMPACT,PERFORMANCE_IMPACT_DESC) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	public static final String TOOL_DELIMT="_DBT-DELIM_";
	public static final String TOOL_DELIMT_GROUP_SPLIT="_DBT-GROUP-SPLIT_";
	public static final String TOOL_DB_DATA_CMP_DELIMT="_DBT-DELIM_";
	
	public static final String GET_PROC_NAMES_IN_COMAPRED_FORMED_TABLE="SELECT DISTINCT PROCEDURE_NAME FROM compare_formed_statements_table where compare_seq=?";
	
	public static final String INSERT_SP_LINE_COUNT =" INSERT INTO SP_ANALYSYS_LINE_COUNT (RUN_ID, PROCEDURE_NAME, LINE_COUNT, CREATED_BY, CREATED_DATE,FOLDER_PATH) " +
			" VALUES (?,?,?,?,?,?) "; 

	
	public static final String GET_PATTERNS_FOR_DBTYPE="SELECT DISTINCT PATTERN_ID  FROM PATTERN_SCORE_TABLE WHERE DB_MIGRATION_TYPE=?";
	public static String INSERT_SP_LOCATION_DETAILS = " INSERT INTO TOOL_PROJECT_SP_FILE_LOCATION_DETAILS(RUN_ID, SP_DISK_LOCATION, CREATED_BY, CREATED_DATE,PROCEDURE_NAME) VALUES(?,?,?,?,?) " ;
	public static String GET_SP_LOCATION_DETAILS = " SELECT PROCEDURE_NAME,SP_DISK_LOCATION FROM TOOL_PROJECT_SP_FILE_LOCATION_DETAILS WHERE RUN_ID =? ";
	public static String GET_SP_SINGLE_LOCATION_DETAILS = " SELECT PROCEDURE_NAME,SP_DISK_LOCATION FROM TOOL_PROJECT_SP_FILE_LOCATION_DETAILS WHERE RUN_ID =? AND PROCEDURE_NAME = ?";
	public static final String INSERT_FRONT_END_DSQL_DETAILS=" INSERT INTO FRONT_END_DSQL_DETAILS_TABLE " +
			" (PROJECT_ID, RUN_SEQ, DSQL_QUERY, SOURCE_FILE_PATH, SOURCE_FILE_NAME, TARGET_FILE_NAME, DSQL_LINE_NUMS_LIST, DSQL_START_KEYWORDS_LIST, CONVERTION_STATUS, DSQL_INVOKED_LINE_NUM, FRONT_END_VAR_NAME,ORIGINAL_DSQL_QUERY)" +
			" VALUES(?,?,?,?,?,?,?,?,?,?,?,?);";
	
	public static final String GET_FRONT_END_DSQL_DETAILS=" SELECT  PROJECT_ID, RUN_SEQ, DSQL_QUERY, SOURCE_FILE_PATH, SOURCE_FILE_NAME, TARGET_FILE_NAME, DSQL_LINE_NUMS_LIST, DSQL_START_KEYWORDS_LIST, CONVERTION_STATUS, DSQL_INVOKED_LINE_NUM, FRONT_END_VAR_NAME,ORIGINAL_DSQL_QUERY " +
			" FROM FRONT_END_DSQL_DETAILS_TABLE WHERE PROJECT_ID=? AND SOURCE_FILE_PATH like ?";
	public static final String INSERT_DSQL_VB_FUNC_REPLACE_DETAILS=" INSERT INTO dsql_vb_func_replace_table  " +
			"(PROJECT_ID, RUN_SEQ, SOURCE_FILE_PATH, SOURCE_FILE_NAME, temp_FILE_NAME, ORGINAL_QUERY_STR, REPLACED_CONST)" +
			"VALUES (?,?,?,?,?,?,?)";

	public static final String GET_DSQL_VB_FUNC_REPLACE_DETAILS=" SELECT PROJECT_ID, RUN_SEQ, SOURCE_FILE_PATH, SOURCE_FILE_NAME, temp_FILE_NAME, ORGINAL_QUERY_STR, REPLACED_CONST FROM  dsql_vb_func_replace_table  " +
			" WHERE PROJECT_ID= ?  /*AND RUN_SEQ=?*/ AND SOURCE_FILE_PATH like ?";
	
	public static final String INSERT_FRONT_END_DSQL_TARGET_MAP_DATA="INSERT INTO front_end_dsql_target_map_table(PROJECT_ID, RUN_SEQ, ORIGINAL_DSQL_QUERY, SOURCE_FILE_PATH, SOURCE_FILE_NAME, CONVERTED_DSQL_QUERY, CONVERTION_STATUS)" +
			" VALUES(?,?,?,?,?,?,?);";
	public static final String INSERT_PROCESS_STATUS_DATA="INSERT INTO CURRENT_PROCESS_STATUS_TABLE (RUN_ID, USER_ID, CURRENT_STAGE, STATUS_MSG, MSG_TYPE, CREATED_DATE)" +
			" VALUES (?,?,?,?,?,?);";
	public static final  String GET_TARGET_LINE_NUM="SELECT TARGET_STATEMENT_NO FROM compare_formed_statements_table " +
			" WHERE COMPARE_SEQ=? AND PROCEDURE_NAME=? AND SOURCE_STATEMENT_NO=?;";
	public static final String GET_CURSOR_DETAILS_FOR_PROC="SELECT DISTINCT CURSOR_NAME FROM cursor_usage_details_table WHERE RUN_ID= ? AND PROCEDURE_NAME=?";
	
}
